<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Work on Ryan Clarke</title>
    <link>//www.ryanclarke.net/tags/work/</link>
    <description>Recent content in Work on Ryan Clarke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2017 Ryan Clarke</copyright>
    <lastBuildDate>Mon, 14 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="//www.ryanclarke.net/tags/work/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using factories for cleanliness in Android testing</title>
      <link>//www.ryanclarke.net/post/using-factories-for-cleanliness-in-android-testing/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/post/using-factories-for-cleanliness-in-android-testing/</guid>
      <description>&lt;p&gt;I am on a team building a native Android app for a local credit union. We are doing some really cool stuff around testing with unit tests, automated instrumentation tests using spoon, and manual user experience testing. We are working in a low-ceremony, flow-based process with continuous client feedback.&lt;/p&gt;

&lt;p&gt;One tool we are using to greatly improve our test quality is factories. Android uses Java and so the very name &amp;ldquo;factory&amp;rdquo; on a Java project (for a credit union, no less) is probably making you think of BaseAbstractStrategyBuilderFactoryImpl and such, but such enterprisyness is not the case.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//www.ryanclarke.net/images/pollution-295305_6401.png&#34; alt=&#34;Factory chimneys billowing polution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In reality, factories aren&amp;rsquo;t obligatorily complex: we are simply building an object. If there was any business logic going on I&amp;rsquo;m sure it would be more complex, but we&amp;rsquo;re just using them in tests to make writing, debugging, and understanding them easier. Even with a test-first development flow, many tests end up needing some state setup to run correctly and hit to correct code paths. And state setup is a chore.&lt;/p&gt;

&lt;p&gt;Java is fairly verbose. Factories allow us to hide that boring instantiation and assignment snooze-festing in a separate place from the main test function.&lt;/p&gt;

&lt;p&gt;Take this example from a bit of code I&amp;rsquo;ve been working on recently. I&amp;rsquo;ve added some Arrange, Act, Assert comments to make this easier to follow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RunWith(AppTestRunner.class)
public class AccountsListActivityTest extends AppActivityUnitTestCase&amp;lt;AccountsListActivity&amp;gt; {

    public AccountsListActivityTest() {
        super(AccountsListActivity.class);
    }

    @Test
    public void selectingAccountListItemLaunchesAccountDetail() {

        // Arrange account
        Account account = new Account();
        account.id = &amp;quot;checking-account-id&amp;quot;;
        account.name = &amp;quot;CHECKING&amp;quot;;
        account.isInCashFlow = false;
        account.isFavorite = false;

        // Arrange group
        AccountGroup group = new AccountGroup();
        group.id = &amp;quot;group-id&amp;quot;;
        group.owners.add(&amp;quot;George E. Meade&amp;quot;);
        group.owners.add(&amp;quot;Robert E. Lee&amp;quot;);

        // Arrange group account
        group.accounts.add(account);

        // Arrange list item
        AccountListItem accountListItem = new AccountListItem();
        accountListItem.build(group, account);

        // Act
        activity.onItemSelected(accountListItem);

        // Assert
        Intent startedIntent = assertThat(activity).launchedActivity(AccountDetailActivity.class);
        assertThat(startedIntent).hasExtra(AppExtras.ACCOUNT, account);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not very thrilling? At least it is straightforward, especially since you can see exactly what state is necessary to build make this action work. But why do we care that you can only build an accountListItem from a group and an account? Why do we care that account.isFavorite is required? &amp;ldquo;isFavorite = false&amp;rdquo; is my motto when it comes to this load of excess. All of the necessary state arrangements are clear, necessary, and completely irrelevant to what we&amp;rsquo;re testing. The boring explicitness makes the thing we care about hard to find. I told you this was a snooze-fest.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to take all the arrange stuff out and make a private method on my test class to hide all the boring setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RunWith(AppTestRunner.class)
public class AccountsListActivityTest extends AppActivityUnitTestCase&amp;lt;AccountsListActivity&amp;gt; {

    public AccountsListActivityTest() {
        super(AccountsListActivity.class);
    }

    @Test
    public void selectingAccountListItemLaunchesAccountDetail() {
        // Arrange
        AccountListItem accountListItem = setupState();

        // Act
        activity.onItemSelected(accountListItem);

        // Assert
        Intent startedIntent = assertThat(activity).launchedActivity(AccountDetailActivity.class);
        assertThat(startedIntent).hasExtra(AppExtras.ACCOUNT, account);
    }

    private AccountListItem setupState() {
        // Arrange account
        Account account = new Account();
        account.id = &amp;quot;checking-account-id&amp;quot;;
        account.name = &amp;quot;CHECKING&amp;quot;;
        account.isInCashFlow = false;
        account.isFavorite = false;

        // Arrange group
        AccountGroup group = new AccountGroup();
        group.id = &amp;quot;group-id&amp;quot;;
        group.owners.add(&amp;quot;George E. Meade&amp;quot;);
        group.owners.add(&amp;quot;Robert E. Lee&amp;quot;);

        // Arrange group account
        group.accounts.add(account);

        // Arrange list item
        AccountListItem accountListItem = new AccountListItem();
        accountListItem.build(group, account);
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The setupState() method is still pretty overwhelming, but we can ignore it when we read the test method and that is an instant readability win.&lt;/p&gt;

&lt;p&gt;Now comes the point of this article. Since we don&amp;rsquo;t care about the details of the state setup for this test and the (redacted) others in this class, we can move all this out into a factory that will build the objects we need for us. Now other test classes that will need similar state just say &amp;ldquo;give me one&amp;rdquo; and no fuss will ensue. The reusability aspect is really nice. The test is now looking clean.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RunWith(AppTestRunner.class)
public class AccountsListActivityTest extends AppActivityUnitTestCase&amp;lt;AccountsListActivity&amp;gt; {

    public AccountsListActivityTest() {
        super(AccountsListActivity.class);
    }

    @Test
    public void selectingAccountListItemLaunchesAccountDetail() {
        activity.onItemSelected(basicAccountListItem());

        Intent startedIntent = assertThat(activity).launchedActivity(AccountDetailActivity.class);
        assertThat(startedIntent).hasExtra(AppExtras.ACCOUNT_account, account);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my factory I&amp;rsquo;ve refactored the state into a few simple, reusable methods that I can mix and match. This arrangement grew out of the needs of the various tests as we wrote them and needed different pieces of data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountsFactory {

    private static AccountGroup emptyGroup() {
        AccountGroup group = new AccountGroup();
        group.id = &amp;quot;group-id&amp;quot;;
        group.owners.add(&amp;quot;George E. Meade&amp;quot;);
        group.owners.add(&amp;quot;Robert E. Lee&amp;quot;);

        return group;
    }

    public static AccountGroup groupWithAccount(Account account) {
        AccountGroup group = emptyGroup();
        group.accounts.add(basicAccount());

        return group;
    }

    public static Account basicAccount() {
        Account account = new Account();
        account.id = &amp;quot;checking-account-id&amp;quot;;
        account.name = &amp;quot;CHECKING&amp;quot;;
        account.isInCashFlow = false;
        account.isFavorite = false;

        return account;
    }

    public static AccountListItem basicAccountListItem() {
        AccountListItem accountListItem = new AccountListItem();
        accountListItem.build(groupWithAccount(), basicAccount());

        return accountListItem;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Aesop-approved moral to this story is to only put the relevant stuff in the test and hide the rest of the boring state-making in a convenient spot for reuse. On this current project we call them factories, and they work great.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You have to start somewhere</title>
      <link>//www.ryanclarke.net/post/you-have-to-start-somewhere/</link>
      <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/post/you-have-to-start-somewhere/</guid>
      <description>

&lt;p&gt;I started fresh in at SEP on Monday and by Tuesday the bananas were fresh out.&lt;/p&gt;

&lt;p&gt;Fellow new guy Jackson and I were tasked with our first project on Monday just before quittin&amp;rsquo; time: update the internal résumé reporting website from &amp;lsquo;ancient&amp;rsquo; to &amp;lsquo;tomorrow.&amp;rsquo; It currently runs on a mid-2006 vintage copy of Ruby on Rails (version 1.1.6). We&amp;rsquo;re supposed to be bringing it up to Rails 4 (coming soon, 2013) but some fundamental pieces of its inner-working were axed from Rails by the end of 2006. We&amp;rsquo;re not supposed to rewrite the project, just bring it up to date, but many important pieces cannot be upgraded.&lt;/p&gt;

&lt;p&gt;Full disclosure: I&amp;rsquo;m fresh in when it comes to Rails (&amp;ldquo;never touched the stuff&amp;rdquo;), so by Tuesday afternoon my brains were fresh out. And, as I said before, so were the bananas.&lt;/p&gt;

&lt;p&gt;As we passed through The Commons during the first-day tour, Laura from HR said &amp;ldquo;there shall be fruit&amp;rdquo; and, unfortunately, there was no fruit. In my hour of need: fresh out. To quote the great Barney Fife, &amp;ldquo;Well, Andy, a slender high-spirited person needs a sugar pick-me-up late in the day.&amp;rdquo; I had to settle for a cup of ice. Just then, something happened…&lt;/p&gt;

&lt;h5 id=&#34;chapter-2&#34;&gt;Chapter 2&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Just when hope is almost lost, things start to look brighter for our young heroes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A remarkable thing about SEP: everyone is willing to help. Not to be too self-critical (and Jackson&amp;rsquo;s effort, to be fair, was nothing short of heroic), but we needed help.
There are many things I don&amp;rsquo;t know. Rails is not the only thing on that list. Here are a few others to get you started. I don&amp;rsquo;t know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the git server (easy to guess)&lt;/li&gt;
&lt;li&gt;The name of the TFS server (impossible to guess, sounds more like a band name)&lt;/li&gt;
&lt;li&gt;The name of the database server (easy, but after the TFS server I was expecting anything)&lt;/li&gt;
&lt;li&gt;The name of the project (five-digit number starting with 06)&lt;/li&gt;
&lt;li&gt;The name of the guy in the next cube (I love the three-monitor setup)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also don&amp;rsquo;t know about many company policies. For instance, do lowly developers need an official sanction from IT to brazenly install Ubuntu VMs on our machines (no). And I haven&amp;rsquo;t even started on all the questions we had about the résumé website&amp;rsquo;s architecture and history.&lt;/p&gt;

&lt;h5 id=&#34;chapter-3&#34;&gt;Chapter 3&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Sorry about chapter 2, this is where things actually get better.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Matt Swanson. He has worked on the résumé system. We asked him a lot of dumb questions and he gave us a lot of good answers. He helped us a ton and he&amp;rsquo;s given the project a fresh start.&lt;/p&gt;

&lt;p&gt;I would like to give a You Rock™ card to Matt (like they told us about in orientation), but I don&amp;rsquo;t know where they are.&lt;/p&gt;

&lt;p&gt;P.S. For non-SEPeers: if you are given two You Rock™ cards of the same color or one each of both colors, you can turn them in to receive Good Stuff™.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Curse of a Dream Job</title>
      <link>//www.ryanclarke.net/journal/the-curse-of-a-dream-job/</link>
      <pubDate>Tue, 21 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/the-curse-of-a-dream-job/</guid>
      <description>&lt;p&gt;No sooner does a person get a job they love then it starts to destroy them. Jesus said His burden is easy, and it is a good thing, because the ones we give ourselves rarely are. Good employees think that they have to do their best at work. And then the work expands, bringing discouragement or exhaustion.&lt;/p&gt;

&lt;p&gt;The true standard: good employees should do their best in the time they are given. Companies can not own slaves. If they are buying eight hours each day, give them an honest eight. Not ten. Have something else to do with those other hours, besides sleep: develop good hobbies, invest in family. Strong family relationships take time and can not be patched together as easily as work projects.&lt;/p&gt;

&lt;p&gt;A good employee who has things to look forward to after work will find that he remains a good employee and has a more fulfilling life.&lt;/p&gt;

&lt;p&gt;Avoid burnout.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tuesday August 28, 2007</title>
      <link>//www.ryanclarke.net/journal/tuesday-august-28-2007/</link>
      <pubDate>Tue, 28 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/tuesday-august-28-2007/</guid>
      <description>&lt;p&gt;Everything that could go wrong at work went wrong. By about 4:00 it had all been tried, so things started going smooth again. And it happened on a day when I didn&amp;rsquo;t want to work.
Why do the days I&amp;rsquo;m excited about work end up being slow and the ones where I just want to do my stuff and leave end up going crazy? I guess I need the motivation more when the work is harder to find. And on crazy days it doesn&amp;rsquo;t matter how I feel: the job just has to get done. So while it seems backwards, I guess it&amp;rsquo;s right after all. Huh.
Well, I learned something new today, so I guess I can go to sleep now.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thursday August 9, 2007</title>
      <link>//www.ryanclarke.net/journal/thursday-august-9-2007/</link>
      <pubDate>Thu, 09 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/thursday-august-9-2007/</guid>
      <description>&lt;p&gt;I have this one day of work and then I leave for Harrisburg, PA. I&amp;rsquo;m flying through the night out to Josh Strickler&amp;rsquo;s wedding. I&amp;rsquo;m pretty excited about the whole trip. I guess I&amp;rsquo;ll pack tonight after work.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Friday July 20, 2007</title>
      <link>//www.ryanclarke.net/journal/friday-july-20-2007/</link>
      <pubDate>Fri, 20 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/friday-july-20-2007/</guid>
      <description>&lt;p&gt;Whew, that was a long day. Oh, the humanity. Pain is weakness muscle leaving your body.
Off to the hot tub&amp;hellip;
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wednesday July 18, 2007</title>
      <link>//www.ryanclarke.net/journal/wednesday-july-18-2007/</link>
      <pubDate>Wed, 18 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/wednesday-july-18-2007/</guid>
      <description>&lt;p&gt;It was a long day, but we still have a few hours left. Off to the factory, again.
It&amp;rsquo;s been a good trip so far.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tuesday July 17, 2007</title>
      <link>//www.ryanclarke.net/journal/tuesday-july-17-2007/</link>
      <pubDate>Tue, 17 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/tuesday-july-17-2007/</guid>
      <description>&lt;p&gt;Well, I made it here. And I just got off work. So I&amp;rsquo;m hitting the sack.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monday July 16, 2007</title>
      <link>//www.ryanclarke.net/journal/monday-july-16-2007/</link>
      <pubDate>Mon, 16 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/monday-july-16-2007/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m headed back to Vancouver tomorrow morning.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Saturday July 14, 2007</title>
      <link>//www.ryanclarke.net/journal/saturday-july-14-2007/</link>
      <pubDate>Sat, 14 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>//www.ryanclarke.net/journal/saturday-july-14-2007/</guid>
      <description>&lt;p&gt;To do:
Sat. 8-Noon: fund raiser car wash with the church youth.
Sat. 5-Midnight: trip to Chandler to hear an Answers in Genesis speaker
Sun. 7:30-11:30am: Church
Sun. 6-7pm: Evangelism Explosion training
Mon. 7am: Fly to Vancouver, BC to work 15+ hour days
Just when things were beginning to calm down, they are as crazy as ever again. Wait, they were beginning to calm down? Since when? At least I&amp;rsquo;m doing what I enjoy.
Ryan
Originally posted at classicalRyan.xanga.com&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

