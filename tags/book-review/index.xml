<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ryan Clarke </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://www.ryanclarke.net/tags/book-review/</link>
    <language>en-us</language>
    <author>Ryan Clarke</author>
    <copyright>© 2015 Ryan Clarke</copyright>
    <updated>Fri, 17 Jul 2015 19:11:19 EDT</updated>
    
    <item>
      <title>Book Review: User Interface Design for Programmers by Joel Spolsky</title>
      <link>http://www.ryanclarke.net/post/user-interface-design-for-programmers/</link>
      <pubDate>Fri, 17 Jul 2015 19:11:19 EDT</pubDate>
      <author>Ryan Clarke</author>
      <guid>http://www.ryanclarke.net/post/user-interface-design-for-programmers/</guid>
      <description>&lt;p&gt;We programmers are notoriously horrible at user interface design. Regardless of whether this stereotype is fair, I&amp;rsquo;m sure we can all think of awful user interfaces we&amp;rsquo;ve been forced to use or, at least, see. In spite of this aknowledged lack of skill, we are regularly called on to design the user interfaces of the software we write. Joel Spolsky noticed this problem all the way back in 2001 and wrote a book to help us. I think it&amp;rsquo;s rather good.&lt;/p&gt;

&lt;p&gt;Of course, this book will not make you a great designer. That takes creativity and experience and probably magic. I think a better title would be &amp;ldquo;Basic User Experience for Programmers&amp;rdquo; since it focuses on program functionality much more than the &amp;lsquo;art.&amp;rsquo; This book will help you be &lt;em&gt;aware&lt;/em&gt; of some basic rules for handling page layout and navigation. Maybe you&amp;rsquo;ll avoid some stupid mistakes next time it falls to you to make some design choices.&lt;/p&gt;

&lt;p&gt;In the middle of the book, Joel devotees one chapter each to three big points. It&amp;rsquo;d be under-selling the book to say these are the main points, but they were particularly impactful to me. They are, and I list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People can&amp;rsquo;t read&lt;/li&gt;
&lt;li&gt;People can&amp;rsquo;t control the mouse&lt;/li&gt;
&lt;li&gt;People can&amp;rsquo;t remember&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may be tempted to read that as &amp;ldquo;People &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; remember&amp;rdquo; or &amp;ldquo;People &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; read.&amp;rdquo; That would be a mistake. You may think these only apply to novice users, but advanced users struggle with these as well. I&amp;rsquo;m a programmer and I don&amp;rsquo;t read error dialog boxes. I have trouble remembering the kaleidescope of urls and apis I see on a daily basis. I also have tons of trouble using a mouse: it&amp;rsquo;s slower than a keyboard, it&amp;rsquo;s unforgiving with those pixel perfect click zones, and it&amp;rsquo;s really laggy on a remote computer. I know a company that built an expensive database system to store lots of precise technical records. To save money and speed up development they left out all data validation because their users were a small group of highly trained experts. Shortly after launching they started a massive effort to add validation onto the application because even highly trained experts make mistakes. They get sick, or move too fast under deadline pressure, or any number of things. And that&amp;rsquo;s under the best conditions.&lt;/p&gt;

&lt;p&gt;The epiphany for me was that usibility is not just for novices, experts need it too. I used to think usability was just a nice extra for power users, now I realize it&amp;rsquo;s often essential. At the least, it makes life better. As Joel points out, the large handles on hotel showers might be there for disabled people, but everyone finds them nice to use.&lt;/p&gt;

&lt;p&gt;I recommend that you read this book if you are a programmer. It&amp;rsquo;s easy and fun to read and it will get you pointed in the right direction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Review: The Book of F# by Dave Fancher</title>
      <link>http://www.ryanclarke.net/post/the-book-of-f-sharp/</link>
      <pubDate>Sat, 13 Jun 2015 11:00:14 EDT</pubDate>
      <author>Ryan Clarke</author>
      <guid>http://www.ryanclarke.net/post/the-book-of-f-sharp/</guid>
      <description>&lt;p&gt;I really like LINQ.&lt;/p&gt;

&lt;p&gt;LINQ is the functional side of C#, and it&amp;rsquo;s my favorite part. I love making extension methods so I can keep the dot-chain going. Naturally I was interested in F#. It&amp;rsquo;s the &amp;ldquo;functional C#&amp;rdquo;, right?&lt;/p&gt;

&lt;p&gt;This book starts great in chapter 1 with getting setup and &amp;lsquo;writing&amp;rsquo; a first app. Happily, it was not another boring &amp;ldquo;Hello World&amp;rdquo;: it was a full Reverse Polish Notation calculator! It took up half a page and looked delightfully strange to my C# trained eyes: there were so many things I didn&amp;rsquo;t understand. Don&amp;rsquo;t worry if you don&amp;rsquo;t understand it, Dave says, because this demos all the cool features you get to learn. And then I wanted to read the whole book, just to understand all those awesome new things.&lt;/p&gt;

&lt;p&gt;Oddly (but, in retrospect, brilliantly), &amp;ldquo;Fundamentals&amp;rdquo; is not chapter 2, it&amp;rsquo;s 3. Chapter 2 is &amp;ldquo;F# Interactive.&amp;rdquo; The FSI is a terminal window in Visual Studio that can run arbitrary pieces of F# code. It&amp;rsquo;s amazing… well, just read the book. It&amp;rsquo;s too much for me to explain here, but it&amp;rsquo;s great. I use it even in C# development if I need a random number or a GUID. Basically any .NET class you can new up (or statically call), you can type into FSI to get a quick output. It&amp;rsquo;s really handy.&lt;/p&gt;

&lt;p&gt;So the big question: have you written anything in F#? I have to hang my head in shame as I answer &amp;ldquo;no.&amp;rdquo; But I&amp;rsquo;m confident that it will be &amp;ldquo;yes&amp;rdquo; very soon now that I&amp;rsquo;ve read this book. I&amp;rsquo;ve got a hammer and everything is starting to look like a nail.&lt;/p&gt;

&lt;p&gt;Disclosure: I won this book in a raffle at a &lt;a href=&#34;http://indysa.org/&#34;&gt;Indy Software Artisans&lt;/a&gt;. It has been signed by &lt;a href=&#34;http://davefancher.com/&#34;&gt;the author&lt;/a&gt; (in pen) and my child (in purple crayon).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Review: Peopleware by DeMarco and Lister</title>
      <link>http://www.ryanclarke.net/post/peopleware/</link>
      <pubDate>Wed, 25 Mar 2015 20:30:10 EDT</pubDate>
      <author>Ryan Clarke</author>
      <guid>http://www.ryanclarke.net/post/peopleware/</guid>
      <description>

&lt;p&gt;Last week I was sick. So I curled up on the couch and read &lt;em&gt;Peopleware: Productive Projects and Teams, 2nd Ed.&lt;/em&gt; by Tom DeMarco and Timothy Lister. &lt;a href=&#34;https://larry-price.com/blog/2015/02/22/peopleware/&#34;&gt;Larry Price&amp;rsquo;s fantastic review&lt;/a&gt; the week before moved it from unknown to the top of my reading list.&lt;/p&gt;

&lt;p&gt;It helped while away the uncomfortable hours. And not just while the hours away: it made them fly. I thoroughly enjoyed this book. I kept turning pages until I had finished the entire volume in a single sitting.&lt;/p&gt;

&lt;p&gt;If my enthusiasm for this book grabs your interest, head over to &lt;a href=&#34;https://larry-price.com/blog/2015/02/22/peopleware/&#34;&gt;Larry&amp;rsquo;s review&lt;/a&gt; for substantive reasons why you should read it. Then continue here for my own scattered thoughts.&lt;/p&gt;

&lt;h1 id=&#34;what-s-the-point&#34;&gt;What&amp;rsquo;s the point?&lt;/h1&gt;

&lt;p&gt;This book doesn&amp;rsquo;t have a singular point as much as a unifying theme. It centers on successful software development by fostering productive teams in good environments. It touches on managing teams, creating producing team environments, quality developers, jelling a team, and having fun. All these subjects are explored with a healthy bit of storytelling and personal experience. Many of the things they write &amp;ldquo;rung true in my heart.&amp;rdquo; These were things which I, for whatever reason, already believed, but had never deeply thought about.&lt;/p&gt;

&lt;h1 id=&#34;how-was-it&#34;&gt;How was it?&lt;/h1&gt;

&lt;p&gt;This book was enjoyable. It was first written in 1987, and when they came out with the second edition, they didn&amp;rsquo;t change the good old stuff. They just added new chapters so the old chapters still have an old feel. It would make the book seem dated if the content wasn&amp;rsquo;t still so relevant today.&lt;/p&gt;

&lt;p&gt;Here are some essays (chapters) I particularly liked and got me thinking.&lt;/p&gt;

&lt;h3 id=&#34;thinking-on-the-job&#34;&gt;Thinking On The Job&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;One afternoon&amp;hellip; Wendl was staring into space, his feet propped up on the desk. Our boss came in and asked, &amp;ldquo;Wendl! What are you doing?&amp;rdquo; Wendl said, &amp;ldquo;I&amp;rsquo;m thinking.&amp;rdquo; And the boss said, &amp;ldquo;Can&amp;rsquo;t you do that at home?&amp;rdquo; ~p.67&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I feel that I don&amp;rsquo;t take enough time to think at work before acting. Acting seems productive, but sometimes a little thought beforehand can provide a better answer than just running with the first thing that pops into my head. I need to learn how to take the productivity &amp;lsquo;hit,&amp;rsquo; put my head down on my desk, and just concentrate for a bit. I think I&amp;rsquo;d be better in the long run.&lt;/p&gt;

&lt;h3 id=&#34;happy-to-be-here-the-mentality-of-permanence&#34;&gt;Happy To Be Here: The Mentality of Permanence&lt;/h3&gt;

&lt;p&gt;In this chapter they talk about how productivity gets lots of air time but employee turnover gets very little. They point out that trying to ring the most out of every hour of work (or, in pointy hair boss situations, the most out of every hour of &lt;em&gt;pay&lt;/em&gt;) can take its toll on the employee and cause them to leave the company.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m in no danger of that here at &lt;a href=&#34;http://www.sep.com&#34;&gt;SEP&lt;/a&gt;, which is wonderful. In fact, we have a very strong culture of permanence. I see SEP in this quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The best organizations are consciously striving to be the best. This is a common goal that provides common direction, joint satisfaction, and a strong binding effect. There is a mentality of permanence about such places, the sense that you&amp;rsquo;d be dumb to look for work elsewhere—people would look at you as though you were daft. ~p.111&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I always though the talk of &amp;ldquo;we&amp;rsquo;re the best&amp;rdquo; was just shallow self-congratulations, but I&amp;rsquo;m beginning to see it as important cultural reinforcement. We&amp;rsquo;re constantly telling ourselves that &amp;ldquo;best&amp;rdquo; is who we are, not in a Rest Upon Our Laurels kind of way, but as an acknowledgement of the importance of excellence. It&amp;rsquo;s a cause that we are reminding ourselves to reach for in each little working moment. &amp;ldquo;We Do Quality Work. Trademark.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;on-not-breaking-up-the-yankees&#34;&gt;On Not Breaking Up the Yankees&lt;/h3&gt;

&lt;p&gt;A team that has jelled together and is functioning well can get a lot of things done well. Much of this book was on the power of teams, how to get a team to jell, and (mostly) all the easy ways to mess it up and &amp;lsquo;kill&amp;rsquo; a team&amp;rsquo;s ability. So teams are fragile, but powerful once formed. It is in the interest of the company to hang on to that achievement.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If a team does knit, don&amp;rsquo;t break it up. At least give people the option to undertake another project together. When teams stay together from one project to the next, they start out each new endeavor with tremendous momentum. ~p.155&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Somehow SEP has managed to be successful with an almost complete lack of continuity in teams, as far as I can tell. Our mix-and-regroup method is working great, but I wonder if experimenting with continuity might lead to an even better system. It would be good to try.&lt;/p&gt;

&lt;h1 id=&#34;who-should-read-this-book&#34;&gt;Who should read this book?&lt;/h1&gt;

&lt;p&gt;All software developers and managers should read this book. For a book that&amp;rsquo;s almost 30 years old, it hits very close to home. If 30-year-old answers (or at least warnings) are available to problems we still face, it probably behooves us to pay attention. It&amp;rsquo;s silly to repeat the same mistakes time and again. I purpose to be a Holgar Dansk (p.173) and work for organizational improvement, and I love it when I see other people in software doing the same.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

